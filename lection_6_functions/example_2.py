# Функція завжди повертає тільки одне значення. Їх може бути декілька через кому, але вони будуть
# в одному контейнері на виході

def adding(a, b):
    # adding(a, b=2) - (b=2) це встановлення значення за замовчуванням може бути так. Таким чином можна
    # викликати функцію з одним аргументом Коли ми створюємо аргументи за замовчуванням то після них не можуть
    # йти позиційні. Наприклад: отак не можна (adding_2(a=1, b):)
    return a + b


print((adding(a=4, b=4)))


def adding_2(a, b=1):
    return a + b, a * b, b - 1


var_1, *var_2 = adding_2(4, 2)
var_3 = adding_2(4, 2)
var_4 = list(adding_2(4, 2))
print(var_1, var_2)  # 6 [8, 1]
print(var_3)  # (6, 8, 1)
print(var_4)  # [6, 8, 1]


# Коли ми ставимо зірочку (*) в розпаковці, то вона збирає решту значень і повертає їх у вигляді списку.
# Хоча якщо результат присвоїти одній змінній, то на виході ми отримаємо кортеж, але якщо поставити зірочку (*),
# то отримаємо список

# ----------------------------------------------------------------
def print_name(name):
    def upper_name(name_inside):
        new_name = name_inside.upper()
        return new_name

    print(f"Welcome {upper_name(name)}")


print_name("halych")


# Welcome HALYCH

# ----------------------------------------------------------------
def my_pow(number, power):
    result = number ** power + 1
    return result


call_my_pow = my_pow(power=3, number=5)
print(call_my_pow)


# 126

# ----------------------------------------------------------------
def my_format(string, char='!'):
    result_string = f'{char}{string}{char}'
    return result_string


print(my_format("String"))


# !String!


# ----------------------------------------------------------------
def print_list(*args):
    print(args)


print_list(1, 2, 3, 4)


# (1, 2, 3, 4)


# ----------------------------------------------------------------
def full_func(*args, **kwargs):
    print(args)
    print(kwargs)


full_func(1, 2, 3, a=4, b=5, c=6)


# {'a': 4, 'b': 5, 'c': 6} і фіг знає що вона робить!


# ----------------------------------------------------------------
def pizdec(*args):
    # *args - приймає будь-яку кількість позицийних аргументів. Повертає результат у вигляді кортежу
    print(args)
    for iterator in args:
        print(iterator)


pizdec(1, 2, 3, 4, 5, 100)


# (1, 2, 3, 4, 5, 100)

# 1
# 2
# 3
# 4
# 5
# 100


# ----------------------------------------------------------------
def piz(**kwargs):
    print(kwargs)
    # for iterator in kwargs:
    #     print(iterator)


# **kwargs - приймає будь-яку кількість іменованих аргументів. Повертає результат у вигляді словника

print(type(piz(a=1, b=2, c=3, d=4)))
# <class 'NoneType'>

# a
# b
# c
# d

# ----------------------------------------------------------------
# ----------------------------------------------------------------
