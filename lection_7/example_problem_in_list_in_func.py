a = list(range(1, 5))


def example(default=[1, 2]):
    sum = 0
    for iteration in default:
        sum += iteration
    default.append(sum)
    print(f"Default is:", default)
    return sum


# Default is: [1, 2, 3, 4, 10]
print(example(a))  # 10
# Default is: [1, 2, 3]
print(example())  # 3
print(example())  # 6
print(example())  # 12


# Коли інтерпритатор починає виконувати код перший раз то він записує default за замовчуванням і це ок. Потім в змінну
# sum записується значення 3 і видає це значення. Далі коли викликаємо ще раз, ці значення у default чомусь не
# скидаються на задані, а береться вже записане казна що. Бо там змінний тип даних. Тобто використовуючи такий підсход
# краще ставити кортеж щоб не зламати виклик функції за замовчуванням

# Коли ми щось робимо зі змінним типом даних - в нього змінюється адреса у памяті і це херова в такому випадку

#  Цю історію можна обійти за допомогою None


def none_default_fun(default=None):
    if default is None:
        default = [1, 2]
    summ = 0
    for iteration in default:
        summ += iteration
    default.append(summ)
    print(f"None Default fun is:", default)
    return summ


print(none_default_fun())  # 3
print(none_default_fun())  # 3
print(none_default_fun())  # 3
print(none_default_fun())  # 3

# Тобто тепер коли ми вперше викликаємо функцію то в памʼяті записується Нона і буде постійно посилатися на
# неї, а Нона це незмінний тип даних і плюс Ноци - в тому що вонa ніщо, і коли викликаємо без аргументів, код знову
# знаходить Нону, умова виконується і знову Нону міняють на значення


# Ще більше жесті.

print(example(a))  # 20

# У нас в змінній (а) зберігаються посилання на значення даних. коли викликається print(example(a)) у нас в default
# функції записується посилання яке міститься в змінній (а) і тепер і змінна default і посилання (а) посилаються на
# одну й ту саму ділянку памʼяті в якій записан список 1,2,3,4 і поли ми змінюємо змінну default, то автоматично
# змінюється змінна (а) бо вони дивляться на той самий айдішнік.

print(example(a))  # 40
